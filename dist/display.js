"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Display class
 */
class Display {
    constructor(process) {
        this._colorsOn = this.calculateColors(process);
        this._colors = {
            reset: { start: 0, stop: 0 },
            bold: { start: 1, stop: 22 },
            dim: { start: 2, stop: 22 },
            italic: { start: 3, stop: 23 },
            underline: { start: 4, stop: 24 },
            inverse: { start: 7, stop: 27 },
            hidden: { start: 8, stop: 28 },
            strikethrough: { start: 9, stop: 29 },
            black: { start: 30, stop: 39 },
            red: { start: 31, stop: 39 },
            green: { start: 32, stop: 39 },
            yellow: { start: 33, stop: 39 },
            blue: { start: 34, stop: 39 },
            magenta: { start: 35, stop: 39 },
            cyan: { start: 36, stop: 39 },
            white: { start: 37, stop: 39 },
            gray: { start: 90, stop: 39 },
            grey: { start: 90, stop: 39 },
            bgBlack: { start: 40, stop: 49 },
            bgRed: { start: 41, stop: 49 },
            bgGreen: { start: 42, stop: 49 },
            bgYellow: { start: 43, stop: 49 },
            bgBlue: { start: 44, stop: 49 },
            bgMagenta: { start: 45, stop: 49 },
            bgCyan: { start: 46, stop: 49 },
            bgWhite: { start: 47, stop: 49 }
        };
    }
    banner(message) {
        console.log(this.colorStart("green") + message + this.colorStop("green"));
    }
    info(message) {
        console.log(this.colorStart("cyan") + message + this.colorStop("cyan"));
    }
    colorStart(color) {
        return this._colorsOn ? "\u001b[" + this._colors[color].start + "m" : "";
    }
    colorStop(color) {
        return this._colorsOn ? "\u001b[" + this._colors[color].stop + "m" : "";
    }
    calculateColors(process) {
        if (process.argv.indexOf("--no-color") !== -1) {
            return false;
        }
        if (process.stdout && !process.stdout.isTTY) {
            return false;
        }
        if (process.platform === "win32") {
            return true;
        }
        if ("COLORTERM" in process.env) {
            return true;
        }
        if (process.env.TERM === "dumb") {
            return false;
        }
        if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
            return true;
        }
        return false;
    }
}
exports.Display = Display;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
